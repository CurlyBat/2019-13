module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type Aggregateblock {
  count: Int!
}

type Aggregateblock_category {
  count: Int!
}

type Aggregateblock_type {
  count: Int!
}

type Aggregateproject {
  count: Int!
}

type Aggregateproject_auth {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type block {
  id: ID!
  position_X: Float
  position_Y: Float
  order: Int!
  project: project!
  parent: block
  type: block_type!
}

type block_category {
  id: ID!
  text: String
  color: String
  block_types(where: block_typeWhereInput, orderBy: block_typeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [block_type!]
}

type block_categoryConnection {
  pageInfo: PageInfo!
  edges: [block_categoryEdge]!
  aggregate: Aggregateblock_category!
}

input block_categoryCreateInput {
  id: ID
  text: String
  color: String
  block_types: block_typeCreateManyWithoutBlock_categoryInput
}

input block_categoryCreateOneWithoutBlock_typesInput {
  create: block_categoryCreateWithoutBlock_typesInput
  connect: block_categoryWhereUniqueInput
}

input block_categoryCreateWithoutBlock_typesInput {
  id: ID
  text: String
  color: String
}

type block_categoryEdge {
  node: block_category!
  cursor: String!
}

enum block_categoryOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  color_ASC
  color_DESC
}

type block_categoryPreviousValues {
  id: ID!
  text: String
  color: String
}

type block_categorySubscriptionPayload {
  mutation: MutationType!
  node: block_category
  updatedFields: [String!]
  previousValues: block_categoryPreviousValues
}

input block_categorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: block_categoryWhereInput
  AND: [block_categorySubscriptionWhereInput!]
  OR: [block_categorySubscriptionWhereInput!]
  NOT: [block_categorySubscriptionWhereInput!]
}

input block_categoryUpdateInput {
  text: String
  color: String
  block_types: block_typeUpdateManyWithoutBlock_categoryInput
}

input block_categoryUpdateManyMutationInput {
  text: String
  color: String
}

input block_categoryUpdateOneRequiredWithoutBlock_typesInput {
  create: block_categoryCreateWithoutBlock_typesInput
  update: block_categoryUpdateWithoutBlock_typesDataInput
  upsert: block_categoryUpsertWithoutBlock_typesInput
  connect: block_categoryWhereUniqueInput
}

input block_categoryUpdateWithoutBlock_typesDataInput {
  text: String
  color: String
}

input block_categoryUpsertWithoutBlock_typesInput {
  update: block_categoryUpdateWithoutBlock_typesDataInput!
  create: block_categoryCreateWithoutBlock_typesInput!
}

input block_categoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  color: String
  color_not: String
  color_in: [String!]
  color_not_in: [String!]
  color_lt: String
  color_lte: String
  color_gt: String
  color_gte: String
  color_contains: String
  color_not_contains: String
  color_starts_with: String
  color_not_starts_with: String
  color_ends_with: String
  color_not_ends_with: String
  block_types_every: block_typeWhereInput
  block_types_some: block_typeWhereInput
  block_types_none: block_typeWhereInput
  AND: [block_categoryWhereInput!]
  OR: [block_categoryWhereInput!]
  NOT: [block_categoryWhereInput!]
}

input block_categoryWhereUniqueInput {
  id: ID
  text: String
}

type block_type {
  id: ID!
  name: String
  shape: String
  content: String
  block(where: blockWhereInput, orderBy: blockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [block!]
  block_category: block_category!
}

type block_typeConnection {
  pageInfo: PageInfo!
  edges: [block_typeEdge]!
  aggregate: Aggregateblock_type!
}

input block_typeCreateInput {
  id: ID
  name: String
  shape: String
  content: String
  block: blockCreateManyWithoutTypeInput
  block_category: block_categoryCreateOneWithoutBlock_typesInput!
}

input block_typeCreateManyWithoutBlock_categoryInput {
  create: [block_typeCreateWithoutBlock_categoryInput!]
  connect: [block_typeWhereUniqueInput!]
}

input block_typeCreateOneWithoutBlockInput {
  create: block_typeCreateWithoutBlockInput
  connect: block_typeWhereUniqueInput
}

input block_typeCreateWithoutBlock_categoryInput {
  id: ID
  name: String
  shape: String
  content: String
  block: blockCreateManyWithoutTypeInput
}

input block_typeCreateWithoutBlockInput {
  id: ID
  name: String
  shape: String
  content: String
  block_category: block_categoryCreateOneWithoutBlock_typesInput!
}

type block_typeEdge {
  node: block_type!
  cursor: String!
}

enum block_typeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  shape_ASC
  shape_DESC
  content_ASC
  content_DESC
}

type block_typePreviousValues {
  id: ID!
  name: String
  shape: String
  content: String
}

input block_typeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  shape: String
  shape_not: String
  shape_in: [String!]
  shape_not_in: [String!]
  shape_lt: String
  shape_lte: String
  shape_gt: String
  shape_gte: String
  shape_contains: String
  shape_not_contains: String
  shape_starts_with: String
  shape_not_starts_with: String
  shape_ends_with: String
  shape_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  AND: [block_typeScalarWhereInput!]
  OR: [block_typeScalarWhereInput!]
  NOT: [block_typeScalarWhereInput!]
}

type block_typeSubscriptionPayload {
  mutation: MutationType!
  node: block_type
  updatedFields: [String!]
  previousValues: block_typePreviousValues
}

input block_typeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: block_typeWhereInput
  AND: [block_typeSubscriptionWhereInput!]
  OR: [block_typeSubscriptionWhereInput!]
  NOT: [block_typeSubscriptionWhereInput!]
}

input block_typeUpdateInput {
  name: String
  shape: String
  content: String
  block: blockUpdateManyWithoutTypeInput
  block_category: block_categoryUpdateOneRequiredWithoutBlock_typesInput
}

input block_typeUpdateManyDataInput {
  name: String
  shape: String
  content: String
}

input block_typeUpdateManyMutationInput {
  name: String
  shape: String
  content: String
}

input block_typeUpdateManyWithoutBlock_categoryInput {
  create: [block_typeCreateWithoutBlock_categoryInput!]
  delete: [block_typeWhereUniqueInput!]
  connect: [block_typeWhereUniqueInput!]
  set: [block_typeWhereUniqueInput!]
  disconnect: [block_typeWhereUniqueInput!]
  update: [block_typeUpdateWithWhereUniqueWithoutBlock_categoryInput!]
  upsert: [block_typeUpsertWithWhereUniqueWithoutBlock_categoryInput!]
  deleteMany: [block_typeScalarWhereInput!]
  updateMany: [block_typeUpdateManyWithWhereNestedInput!]
}

input block_typeUpdateManyWithWhereNestedInput {
  where: block_typeScalarWhereInput!
  data: block_typeUpdateManyDataInput!
}

input block_typeUpdateOneRequiredWithoutBlockInput {
  create: block_typeCreateWithoutBlockInput
  update: block_typeUpdateWithoutBlockDataInput
  upsert: block_typeUpsertWithoutBlockInput
  connect: block_typeWhereUniqueInput
}

input block_typeUpdateWithoutBlock_categoryDataInput {
  name: String
  shape: String
  content: String
  block: blockUpdateManyWithoutTypeInput
}

input block_typeUpdateWithoutBlockDataInput {
  name: String
  shape: String
  content: String
  block_category: block_categoryUpdateOneRequiredWithoutBlock_typesInput
}

input block_typeUpdateWithWhereUniqueWithoutBlock_categoryInput {
  where: block_typeWhereUniqueInput!
  data: block_typeUpdateWithoutBlock_categoryDataInput!
}

input block_typeUpsertWithoutBlockInput {
  update: block_typeUpdateWithoutBlockDataInput!
  create: block_typeCreateWithoutBlockInput!
}

input block_typeUpsertWithWhereUniqueWithoutBlock_categoryInput {
  where: block_typeWhereUniqueInput!
  update: block_typeUpdateWithoutBlock_categoryDataInput!
  create: block_typeCreateWithoutBlock_categoryInput!
}

input block_typeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  shape: String
  shape_not: String
  shape_in: [String!]
  shape_not_in: [String!]
  shape_lt: String
  shape_lte: String
  shape_gt: String
  shape_gte: String
  shape_contains: String
  shape_not_contains: String
  shape_starts_with: String
  shape_not_starts_with: String
  shape_ends_with: String
  shape_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  block_every: blockWhereInput
  block_some: blockWhereInput
  block_none: blockWhereInput
  block_category: block_categoryWhereInput
  AND: [block_typeWhereInput!]
  OR: [block_typeWhereInput!]
  NOT: [block_typeWhereInput!]
}

input block_typeWhereUniqueInput {
  id: ID
  name: String
}

type blockConnection {
  pageInfo: PageInfo!
  edges: [blockEdge]!
  aggregate: Aggregateblock!
}

input blockCreateInput {
  id: ID
  position_X: Float
  position_Y: Float
  order: Int!
  project: projectCreateOneWithoutBlocksInput!
  parent: blockCreateOneWithoutParentInput
  type: block_typeCreateOneWithoutBlockInput!
}

input blockCreateManyWithoutProjectInput {
  create: [blockCreateWithoutProjectInput!]
  connect: [blockWhereUniqueInput!]
}

input blockCreateManyWithoutTypeInput {
  create: [blockCreateWithoutTypeInput!]
  connect: [blockWhereUniqueInput!]
}

input blockCreateOneWithoutParentInput {
  create: blockCreateWithoutParentInput
  connect: blockWhereUniqueInput
}

input blockCreateWithoutParentInput {
  id: ID
  position_X: Float
  position_Y: Float
  order: Int!
  project: projectCreateOneWithoutBlocksInput!
  type: block_typeCreateOneWithoutBlockInput!
}

input blockCreateWithoutProjectInput {
  id: ID
  position_X: Float
  position_Y: Float
  order: Int!
  parent: blockCreateOneWithoutParentInput
  type: block_typeCreateOneWithoutBlockInput!
}

input blockCreateWithoutTypeInput {
  id: ID
  position_X: Float
  position_Y: Float
  order: Int!
  project: projectCreateOneWithoutBlocksInput!
  parent: blockCreateOneWithoutParentInput
}

type blockEdge {
  node: block!
  cursor: String!
}

enum blockOrderByInput {
  id_ASC
  id_DESC
  position_X_ASC
  position_X_DESC
  position_Y_ASC
  position_Y_DESC
  order_ASC
  order_DESC
}

type blockPreviousValues {
  id: ID!
  position_X: Float
  position_Y: Float
  order: Int!
}

input blockScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  position_X: Float
  position_X_not: Float
  position_X_in: [Float!]
  position_X_not_in: [Float!]
  position_X_lt: Float
  position_X_lte: Float
  position_X_gt: Float
  position_X_gte: Float
  position_Y: Float
  position_Y_not: Float
  position_Y_in: [Float!]
  position_Y_not_in: [Float!]
  position_Y_lt: Float
  position_Y_lte: Float
  position_Y_gt: Float
  position_Y_gte: Float
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  AND: [blockScalarWhereInput!]
  OR: [blockScalarWhereInput!]
  NOT: [blockScalarWhereInput!]
}

type blockSubscriptionPayload {
  mutation: MutationType!
  node: block
  updatedFields: [String!]
  previousValues: blockPreviousValues
}

input blockSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: blockWhereInput
  AND: [blockSubscriptionWhereInput!]
  OR: [blockSubscriptionWhereInput!]
  NOT: [blockSubscriptionWhereInput!]
}

input blockUpdateInput {
  position_X: Float
  position_Y: Float
  order: Int
  project: projectUpdateOneRequiredWithoutBlocksInput
  parent: blockUpdateOneWithoutParentInput
  type: block_typeUpdateOneRequiredWithoutBlockInput
}

input blockUpdateManyDataInput {
  position_X: Float
  position_Y: Float
  order: Int
}

input blockUpdateManyMutationInput {
  position_X: Float
  position_Y: Float
  order: Int
}

input blockUpdateManyWithoutProjectInput {
  create: [blockCreateWithoutProjectInput!]
  delete: [blockWhereUniqueInput!]
  connect: [blockWhereUniqueInput!]
  set: [blockWhereUniqueInput!]
  disconnect: [blockWhereUniqueInput!]
  update: [blockUpdateWithWhereUniqueWithoutProjectInput!]
  upsert: [blockUpsertWithWhereUniqueWithoutProjectInput!]
  deleteMany: [blockScalarWhereInput!]
  updateMany: [blockUpdateManyWithWhereNestedInput!]
}

input blockUpdateManyWithoutTypeInput {
  create: [blockCreateWithoutTypeInput!]
  delete: [blockWhereUniqueInput!]
  connect: [blockWhereUniqueInput!]
  set: [blockWhereUniqueInput!]
  disconnect: [blockWhereUniqueInput!]
  update: [blockUpdateWithWhereUniqueWithoutTypeInput!]
  upsert: [blockUpsertWithWhereUniqueWithoutTypeInput!]
  deleteMany: [blockScalarWhereInput!]
  updateMany: [blockUpdateManyWithWhereNestedInput!]
}

input blockUpdateManyWithWhereNestedInput {
  where: blockScalarWhereInput!
  data: blockUpdateManyDataInput!
}

input blockUpdateOneWithoutParentInput {
  create: blockCreateWithoutParentInput
  update: blockUpdateWithoutParentDataInput
  upsert: blockUpsertWithoutParentInput
  delete: Boolean
  disconnect: Boolean
  connect: blockWhereUniqueInput
}

input blockUpdateWithoutParentDataInput {
  position_X: Float
  position_Y: Float
  order: Int
  project: projectUpdateOneRequiredWithoutBlocksInput
  type: block_typeUpdateOneRequiredWithoutBlockInput
}

input blockUpdateWithoutProjectDataInput {
  position_X: Float
  position_Y: Float
  order: Int
  parent: blockUpdateOneWithoutParentInput
  type: block_typeUpdateOneRequiredWithoutBlockInput
}

input blockUpdateWithoutTypeDataInput {
  position_X: Float
  position_Y: Float
  order: Int
  project: projectUpdateOneRequiredWithoutBlocksInput
  parent: blockUpdateOneWithoutParentInput
}

input blockUpdateWithWhereUniqueWithoutProjectInput {
  where: blockWhereUniqueInput!
  data: blockUpdateWithoutProjectDataInput!
}

input blockUpdateWithWhereUniqueWithoutTypeInput {
  where: blockWhereUniqueInput!
  data: blockUpdateWithoutTypeDataInput!
}

input blockUpsertWithoutParentInput {
  update: blockUpdateWithoutParentDataInput!
  create: blockCreateWithoutParentInput!
}

input blockUpsertWithWhereUniqueWithoutProjectInput {
  where: blockWhereUniqueInput!
  update: blockUpdateWithoutProjectDataInput!
  create: blockCreateWithoutProjectInput!
}

input blockUpsertWithWhereUniqueWithoutTypeInput {
  where: blockWhereUniqueInput!
  update: blockUpdateWithoutTypeDataInput!
  create: blockCreateWithoutTypeInput!
}

input blockWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  position_X: Float
  position_X_not: Float
  position_X_in: [Float!]
  position_X_not_in: [Float!]
  position_X_lt: Float
  position_X_lte: Float
  position_X_gt: Float
  position_X_gte: Float
  position_Y: Float
  position_Y_not: Float
  position_Y_in: [Float!]
  position_Y_not_in: [Float!]
  position_Y_lt: Float
  position_Y_lte: Float
  position_Y_gt: Float
  position_Y_gte: Float
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  project: projectWhereInput
  parent: blockWhereInput
  type: block_typeWhereInput
  AND: [blockWhereInput!]
  OR: [blockWhereInput!]
  NOT: [blockWhereInput!]
}

input blockWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createblock(data: blockCreateInput!): block!
  updateblock(data: blockUpdateInput!, where: blockWhereUniqueInput!): block
  updateManyblocks(data: blockUpdateManyMutationInput!, where: blockWhereInput): BatchPayload!
  upsertblock(where: blockWhereUniqueInput!, create: blockCreateInput!, update: blockUpdateInput!): block!
  deleteblock(where: blockWhereUniqueInput!): block
  deleteManyblocks(where: blockWhereInput): BatchPayload!
  createblock_category(data: block_categoryCreateInput!): block_category!
  updateblock_category(data: block_categoryUpdateInput!, where: block_categoryWhereUniqueInput!): block_category
  updateManyblock_categories(data: block_categoryUpdateManyMutationInput!, where: block_categoryWhereInput): BatchPayload!
  upsertblock_category(where: block_categoryWhereUniqueInput!, create: block_categoryCreateInput!, update: block_categoryUpdateInput!): block_category!
  deleteblock_category(where: block_categoryWhereUniqueInput!): block_category
  deleteManyblock_categories(where: block_categoryWhereInput): BatchPayload!
  createblock_type(data: block_typeCreateInput!): block_type!
  updateblock_type(data: block_typeUpdateInput!, where: block_typeWhereUniqueInput!): block_type
  updateManyblock_types(data: block_typeUpdateManyMutationInput!, where: block_typeWhereInput): BatchPayload!
  upsertblock_type(where: block_typeWhereUniqueInput!, create: block_typeCreateInput!, update: block_typeUpdateInput!): block_type!
  deleteblock_type(where: block_typeWhereUniqueInput!): block_type
  deleteManyblock_types(where: block_typeWhereInput): BatchPayload!
  createproject(data: projectCreateInput!): project!
  updateproject(data: projectUpdateInput!, where: projectWhereUniqueInput!): project
  updateManyprojects(data: projectUpdateManyMutationInput!, where: projectWhereInput): BatchPayload!
  upsertproject(where: projectWhereUniqueInput!, create: projectCreateInput!, update: projectUpdateInput!): project!
  deleteproject(where: projectWhereUniqueInput!): project
  deleteManyprojects(where: projectWhereInput): BatchPayload!
  createproject_auth(data: project_authCreateInput!): project_auth!
  updateproject_auth(data: project_authUpdateInput!, where: project_authWhereUniqueInput!): project_auth
  upsertproject_auth(where: project_authWhereUniqueInput!, create: project_authCreateInput!, update: project_authUpdateInput!): project_auth!
  deleteproject_auth(where: project_authWhereUniqueInput!): project_auth
  deleteManyproject_auths(where: project_authWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type project {
  id: ID!
  title: String!
  description: String!
  like: Int!
  private: Boolean!
  owner: User!
  blocks(where: blockWhereInput, orderBy: blockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [block!]
  authes(where: project_authWhereInput, orderBy: project_authOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [project_auth!]
}

type project_auth {
  id: ID!
  project: project!
  user: User!
}

type project_authConnection {
  pageInfo: PageInfo!
  edges: [project_authEdge]!
  aggregate: Aggregateproject_auth!
}

input project_authCreateInput {
  id: ID
  project: projectCreateOneWithoutAuthesInput!
  user: UserCreateOneWithoutAuthesInput!
}

input project_authCreateManyWithoutProjectInput {
  create: [project_authCreateWithoutProjectInput!]
  connect: [project_authWhereUniqueInput!]
}

input project_authCreateManyWithoutUserInput {
  create: [project_authCreateWithoutUserInput!]
  connect: [project_authWhereUniqueInput!]
}

input project_authCreateWithoutProjectInput {
  id: ID
  user: UserCreateOneWithoutAuthesInput!
}

input project_authCreateWithoutUserInput {
  id: ID
  project: projectCreateOneWithoutAuthesInput!
}

type project_authEdge {
  node: project_auth!
  cursor: String!
}

enum project_authOrderByInput {
  id_ASC
  id_DESC
}

type project_authPreviousValues {
  id: ID!
}

input project_authScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [project_authScalarWhereInput!]
  OR: [project_authScalarWhereInput!]
  NOT: [project_authScalarWhereInput!]
}

type project_authSubscriptionPayload {
  mutation: MutationType!
  node: project_auth
  updatedFields: [String!]
  previousValues: project_authPreviousValues
}

input project_authSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: project_authWhereInput
  AND: [project_authSubscriptionWhereInput!]
  OR: [project_authSubscriptionWhereInput!]
  NOT: [project_authSubscriptionWhereInput!]
}

input project_authUpdateInput {
  project: projectUpdateOneRequiredWithoutAuthesInput
  user: UserUpdateOneRequiredWithoutAuthesInput
}

input project_authUpdateManyWithoutProjectInput {
  create: [project_authCreateWithoutProjectInput!]
  delete: [project_authWhereUniqueInput!]
  connect: [project_authWhereUniqueInput!]
  set: [project_authWhereUniqueInput!]
  disconnect: [project_authWhereUniqueInput!]
  update: [project_authUpdateWithWhereUniqueWithoutProjectInput!]
  upsert: [project_authUpsertWithWhereUniqueWithoutProjectInput!]
  deleteMany: [project_authScalarWhereInput!]
}

input project_authUpdateManyWithoutUserInput {
  create: [project_authCreateWithoutUserInput!]
  delete: [project_authWhereUniqueInput!]
  connect: [project_authWhereUniqueInput!]
  set: [project_authWhereUniqueInput!]
  disconnect: [project_authWhereUniqueInput!]
  update: [project_authUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [project_authUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [project_authScalarWhereInput!]
}

input project_authUpdateWithoutProjectDataInput {
  user: UserUpdateOneRequiredWithoutAuthesInput
}

input project_authUpdateWithoutUserDataInput {
  project: projectUpdateOneRequiredWithoutAuthesInput
}

input project_authUpdateWithWhereUniqueWithoutProjectInput {
  where: project_authWhereUniqueInput!
  data: project_authUpdateWithoutProjectDataInput!
}

input project_authUpdateWithWhereUniqueWithoutUserInput {
  where: project_authWhereUniqueInput!
  data: project_authUpdateWithoutUserDataInput!
}

input project_authUpsertWithWhereUniqueWithoutProjectInput {
  where: project_authWhereUniqueInput!
  update: project_authUpdateWithoutProjectDataInput!
  create: project_authCreateWithoutProjectInput!
}

input project_authUpsertWithWhereUniqueWithoutUserInput {
  where: project_authWhereUniqueInput!
  update: project_authUpdateWithoutUserDataInput!
  create: project_authCreateWithoutUserInput!
}

input project_authWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  project: projectWhereInput
  user: UserWhereInput
  AND: [project_authWhereInput!]
  OR: [project_authWhereInput!]
  NOT: [project_authWhereInput!]
}

input project_authWhereUniqueInput {
  id: ID
}

type projectConnection {
  pageInfo: PageInfo!
  edges: [projectEdge]!
  aggregate: Aggregateproject!
}

input projectCreateInput {
  id: ID
  title: String!
  description: String!
  like: Int!
  private: Boolean!
  owner: UserCreateOneWithoutProjectsInput!
  blocks: blockCreateManyWithoutProjectInput
  authes: project_authCreateManyWithoutProjectInput
}

input projectCreateManyWithoutOwnerInput {
  create: [projectCreateWithoutOwnerInput!]
  connect: [projectWhereUniqueInput!]
}

input projectCreateOneWithoutAuthesInput {
  create: projectCreateWithoutAuthesInput
  connect: projectWhereUniqueInput
}

input projectCreateOneWithoutBlocksInput {
  create: projectCreateWithoutBlocksInput
  connect: projectWhereUniqueInput
}

input projectCreateWithoutAuthesInput {
  id: ID
  title: String!
  description: String!
  like: Int!
  private: Boolean!
  owner: UserCreateOneWithoutProjectsInput!
  blocks: blockCreateManyWithoutProjectInput
}

input projectCreateWithoutBlocksInput {
  id: ID
  title: String!
  description: String!
  like: Int!
  private: Boolean!
  owner: UserCreateOneWithoutProjectsInput!
  authes: project_authCreateManyWithoutProjectInput
}

input projectCreateWithoutOwnerInput {
  id: ID
  title: String!
  description: String!
  like: Int!
  private: Boolean!
  blocks: blockCreateManyWithoutProjectInput
  authes: project_authCreateManyWithoutProjectInput
}

type projectEdge {
  node: project!
  cursor: String!
}

enum projectOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  like_ASC
  like_DESC
  private_ASC
  private_DESC
}

type projectPreviousValues {
  id: ID!
  title: String!
  description: String!
  like: Int!
  private: Boolean!
}

input projectScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  like: Int
  like_not: Int
  like_in: [Int!]
  like_not_in: [Int!]
  like_lt: Int
  like_lte: Int
  like_gt: Int
  like_gte: Int
  private: Boolean
  private_not: Boolean
  AND: [projectScalarWhereInput!]
  OR: [projectScalarWhereInput!]
  NOT: [projectScalarWhereInput!]
}

type projectSubscriptionPayload {
  mutation: MutationType!
  node: project
  updatedFields: [String!]
  previousValues: projectPreviousValues
}

input projectSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: projectWhereInput
  AND: [projectSubscriptionWhereInput!]
  OR: [projectSubscriptionWhereInput!]
  NOT: [projectSubscriptionWhereInput!]
}

input projectUpdateInput {
  title: String
  description: String
  like: Int
  private: Boolean
  owner: UserUpdateOneRequiredWithoutProjectsInput
  blocks: blockUpdateManyWithoutProjectInput
  authes: project_authUpdateManyWithoutProjectInput
}

input projectUpdateManyDataInput {
  title: String
  description: String
  like: Int
  private: Boolean
}

input projectUpdateManyMutationInput {
  title: String
  description: String
  like: Int
  private: Boolean
}

input projectUpdateManyWithoutOwnerInput {
  create: [projectCreateWithoutOwnerInput!]
  delete: [projectWhereUniqueInput!]
  connect: [projectWhereUniqueInput!]
  set: [projectWhereUniqueInput!]
  disconnect: [projectWhereUniqueInput!]
  update: [projectUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [projectUpsertWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [projectScalarWhereInput!]
  updateMany: [projectUpdateManyWithWhereNestedInput!]
}

input projectUpdateManyWithWhereNestedInput {
  where: projectScalarWhereInput!
  data: projectUpdateManyDataInput!
}

input projectUpdateOneRequiredWithoutAuthesInput {
  create: projectCreateWithoutAuthesInput
  update: projectUpdateWithoutAuthesDataInput
  upsert: projectUpsertWithoutAuthesInput
  connect: projectWhereUniqueInput
}

input projectUpdateOneRequiredWithoutBlocksInput {
  create: projectCreateWithoutBlocksInput
  update: projectUpdateWithoutBlocksDataInput
  upsert: projectUpsertWithoutBlocksInput
  connect: projectWhereUniqueInput
}

input projectUpdateWithoutAuthesDataInput {
  title: String
  description: String
  like: Int
  private: Boolean
  owner: UserUpdateOneRequiredWithoutProjectsInput
  blocks: blockUpdateManyWithoutProjectInput
}

input projectUpdateWithoutBlocksDataInput {
  title: String
  description: String
  like: Int
  private: Boolean
  owner: UserUpdateOneRequiredWithoutProjectsInput
  authes: project_authUpdateManyWithoutProjectInput
}

input projectUpdateWithoutOwnerDataInput {
  title: String
  description: String
  like: Int
  private: Boolean
  blocks: blockUpdateManyWithoutProjectInput
  authes: project_authUpdateManyWithoutProjectInput
}

input projectUpdateWithWhereUniqueWithoutOwnerInput {
  where: projectWhereUniqueInput!
  data: projectUpdateWithoutOwnerDataInput!
}

input projectUpsertWithoutAuthesInput {
  update: projectUpdateWithoutAuthesDataInput!
  create: projectCreateWithoutAuthesInput!
}

input projectUpsertWithoutBlocksInput {
  update: projectUpdateWithoutBlocksDataInput!
  create: projectCreateWithoutBlocksInput!
}

input projectUpsertWithWhereUniqueWithoutOwnerInput {
  where: projectWhereUniqueInput!
  update: projectUpdateWithoutOwnerDataInput!
  create: projectCreateWithoutOwnerInput!
}

input projectWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  like: Int
  like_not: Int
  like_in: [Int!]
  like_not_in: [Int!]
  like_lt: Int
  like_lte: Int
  like_gt: Int
  like_gte: Int
  private: Boolean
  private_not: Boolean
  owner: UserWhereInput
  blocks_every: blockWhereInput
  blocks_some: blockWhereInput
  blocks_none: blockWhereInput
  authes_every: project_authWhereInput
  authes_some: project_authWhereInput
  authes_none: project_authWhereInput
  AND: [projectWhereInput!]
  OR: [projectWhereInput!]
  NOT: [projectWhereInput!]
}

input projectWhereUniqueInput {
  id: ID
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  block(where: blockWhereUniqueInput!): block
  blocks(where: blockWhereInput, orderBy: blockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [block]!
  blocksConnection(where: blockWhereInput, orderBy: blockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): blockConnection!
  blockCategory(where: block_categoryWhereUniqueInput!): block_category
  blockCategories(where: block_categoryWhereInput, orderBy: block_categoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [block_category]!
  blockCategoriesConnection(where: block_categoryWhereInput, orderBy: block_categoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): block_categoryConnection!
  blockType(where: block_typeWhereUniqueInput!): block_type
  blockTypes(where: block_typeWhereInput, orderBy: block_typeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [block_type]!
  blockTypesConnection(where: block_typeWhereInput, orderBy: block_typeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): block_typeConnection!
  project(where: projectWhereUniqueInput!): project
  projects(where: projectWhereInput, orderBy: projectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [project]!
  projectsConnection(where: projectWhereInput, orderBy: projectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): projectConnection!
  projectAuth(where: project_authWhereUniqueInput!): project_auth
  projectAuths(where: project_authWhereInput, orderBy: project_authOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [project_auth]!
  projectAuthsConnection(where: project_authWhereInput, orderBy: project_authOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): project_authConnection!
  node(id: ID!): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  block(where: blockSubscriptionWhereInput): blockSubscriptionPayload
  blockCategory(where: block_categorySubscriptionWhereInput): block_categorySubscriptionPayload
  blockType(where: block_typeSubscriptionWhereInput): block_typeSubscriptionPayload
  project(where: projectSubscriptionWhereInput): projectSubscriptionPayload
  projectAuth(where: project_authSubscriptionWhereInput): project_authSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  picture: String!
  email: String!
  projects(where: projectWhereInput, orderBy: projectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [project!]
  authes(where: project_authWhereInput, orderBy: project_authOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [project_auth!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  picture: String!
  email: String!
  projects: projectCreateManyWithoutOwnerInput
  authes: project_authCreateManyWithoutUserInput
}

input UserCreateOneWithoutAuthesInput {
  create: UserCreateWithoutAuthesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutProjectsInput {
  create: UserCreateWithoutProjectsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAuthesInput {
  id: ID
  name: String!
  picture: String!
  email: String!
  projects: projectCreateManyWithoutOwnerInput
}

input UserCreateWithoutProjectsInput {
  id: ID
  name: String!
  picture: String!
  email: String!
  authes: project_authCreateManyWithoutUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  picture_ASC
  picture_DESC
  email_ASC
  email_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  picture: String!
  email: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  picture: String
  email: String
  projects: projectUpdateManyWithoutOwnerInput
  authes: project_authUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  picture: String
  email: String
}

input UserUpdateOneRequiredWithoutAuthesInput {
  create: UserCreateWithoutAuthesInput
  update: UserUpdateWithoutAuthesDataInput
  upsert: UserUpsertWithoutAuthesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutProjectsInput {
  create: UserCreateWithoutProjectsInput
  update: UserUpdateWithoutProjectsDataInput
  upsert: UserUpsertWithoutProjectsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutAuthesDataInput {
  name: String
  picture: String
  email: String
  projects: projectUpdateManyWithoutOwnerInput
}

input UserUpdateWithoutProjectsDataInput {
  name: String
  picture: String
  email: String
  authes: project_authUpdateManyWithoutUserInput
}

input UserUpsertWithoutAuthesInput {
  update: UserUpdateWithoutAuthesDataInput!
  create: UserCreateWithoutAuthesInput!
}

input UserUpsertWithoutProjectsInput {
  update: UserUpdateWithoutProjectsDataInput!
  create: UserCreateWithoutProjectsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  picture: String
  picture_not: String
  picture_in: [String!]
  picture_not_in: [String!]
  picture_lt: String
  picture_lte: String
  picture_gt: String
  picture_gte: String
  picture_contains: String
  picture_not_contains: String
  picture_starts_with: String
  picture_not_starts_with: String
  picture_ends_with: String
  picture_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  projects_every: projectWhereInput
  projects_some: projectWhereInput
  projects_none: projectWhereInput
  authes_every: project_authWhereInput
  authes_some: project_authWhereInput
  authes_none: project_authWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    