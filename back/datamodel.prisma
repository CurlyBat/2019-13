type User {
  id: ID! @id
  name: String!
  picture: String!
  email: String! @unique
  projects: [Project]! @relation(name: "ProjectsByUser")
  authes: [ProjectAuth]! @relation(name : "AuthesByUser")
  likes: [Like]! @relation(name : "LikesByUser")
}
type Project {
  id: ID! @id 
  title: String!
  description: String!
  like: Int!
  private: Boolean!
  owner: User! @relation(link : TABLE, name: "ProjectByUser")
  blocks: [Block]! @relation(name: "BlocksByProject")
  authes: [ProjectAuth]! @relation(name: "AuthesByProject")
  likes: [Like]! @relation(name : "LikesByProject")
  images: [Image]! @relation(name : "ImagesByProject")
}
type ProjectAuth {
  id: ID! @id
  project: Project! @relation(link : TABLE, name:"AuthesByProject")
  user: User! @relation(link : TABLE, name: "AuthesByUser")
}
type Block {
  id: ID! @id
  type: String!
  positionX: Float
  positionY: Float
  nextElementId: String 
  firstChildElementId: String
  secondChildElementId: String
  inputElementId: [String]! @scalarList(strategy: RELATION)
  project: Project! @relation(link : TABLE, name:"BlocksByProject")
  inputValues: [InputValue]! @relation(link : TABLE, name:"ArgumentsByBlock")
}
type InputValue {
  id: ID! @id
  value: Float!
  block: Block! @relation(link : TABLE, name:"ArgumentByBlock")
  order: Int!
}
type Like {
  id: ID! @id
  project: Project! @relation(link : TABLE, name:"LikesByProject")
  user: User! @relation(link : TABLE, name:"LikesByUser")
}
type Image {
  id: ID! @id
  name: String!
  project: Project! @relation(link : TABLE, name:"ImagesByProject")
  url: String!
  realName: String!
  positionX: Float!
  positionY: Float!
  size: Int!
  direction: Int!
}