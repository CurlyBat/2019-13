type User {
  id: ID! @id
  name: String!
  picture: String!
  email: String! @unique
  projects: [Project]! @relation(name: "ProjectsByUser")
  authes: [ProjectAuth]! @relation(name : "AuthesByUser")
  likes: [Like]! @relation(name : "LikesByUser")
  comments: [Comment]! @relation(name : "CommentByUser")
}
type Project {
  id: ID! @id 
  title: String!
  description: String!
  views: Int!
  private: Boolean!
  owner: User! @relation(name: "ProjectByUser")
  canvasImage: String!
  realCanvasImage: String!
  authes: [ProjectAuth]! @relation(name: "AuthesByProject")
  likes: [Like]! @relation(name : "LikesByProject")
  comments: [Comment]! @relation(name : "CommentByProject" onDelete: CASCADE)
  workspaces: [Workspace]! @relation(name : "WorkspacesByProject" onDelete: CASCADE)
}
type ProjectAuth {
  id: ID! @id
  project: Project! @relation(name:"AuthesByProject")
  user: User! @relation(name: "AuthesByUser")
}
type Workspace {
  id: ID! @id
  project: Project! @relation(name:"WorkspacesByProject")
  images: [Image]! @relation(name:"ImageByWorkspace" onDelete: CASCADE)
  blocks: [Block]! @relation(name:"BlocksByWorkspace" onDelete: CASCADE)
}
type Block {
  id: ID! @id
  type: String!
  x: Float
  y: Float
  nextElementId: String 
  firstChildElementId: String
  secondChildElementId: String
  inputElementId: [String]! @scalarList(strategy: RELATION)
  workspace: Workspace! @relation(name:"BlocksByWorkspace")
}
type Image {
  id: ID! @id
  name: String!
  url: String!
  realName: String!
  x: Float!
  y: Float!
  size: Int!
  direction: Int!
  workspace: Workspace! @relation(link : TABLE, name:"ImageByWorkspace")
}
type Comment {
  id: ID! @id
  text: String!
  project: Project! @relation(link : TABLE, name:"CommentByProject")
  user: User! @relation(link : TABLE, name:"CommentByUser")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}
type Like {
  id: ID! @id
  project: Project! @relation(link : TABLE, name:"LikesByProject")
  user: User! @relation(link : TABLE, name:"LikesByUser")
}